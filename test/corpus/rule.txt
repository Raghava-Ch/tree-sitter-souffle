============================================================
Nullary rule
============================================================

rule() :- fact().

---

(program
  (rule
    (monotonic_rule
      head: (atom (qualified_name (ident)))
      body:
        (disjunction
          (conjunction (atom (qualified_name (ident))))))))

============================================================
Nullary negation
============================================================

rule() :- !rule().

---

(program
  (rule
    (monotonic_rule
      head: (atom (qualified_name (ident)))
      body:
        (disjunction
          (conjunction
            (negation)
            (atom (qualified_name (ident))))))))

============================================================
Binary conjunction
============================================================

rule(X) :- foo(X), bar(Y).

---

(program
  (rule
    (monotonic_rule
      head:
        (atom
          (qualified_name (ident))
          (argument (variable (ident))))
      body:
        (disjunction
          (conjunction
            (atom (qualified_name (ident)) (argument (variable (ident))))
            (atom (qualified_name (ident)) (argument (variable (ident)))))))))

============================================================
Ternary conjunction
============================================================

rule(X) :- foo(X1), bar(Y1), baz(Z1).

---

(program
  (rule
    (monotonic_rule
      head:
        (atom
          (qualified_name (ident))
          (argument (variable (ident))))
      body:
        (disjunction
          (conjunction
            (atom (qualified_name (ident)) (argument (variable (ident))))
            (atom (qualified_name (ident)) (argument (variable (ident))))
            (atom (qualified_name (ident)) (argument (variable (ident)))))))))

============================================================
Binary disjunction
============================================================

rule(X, Y) :- foo(X); bar(Y).

---

(program
  (rule
    (monotonic_rule
      head:
        (atom
          (qualified_name (ident))
          (argument (variable (ident)))
          (argument (variable (ident))))
      body:
        (disjunction
          (conjunction
            (atom (qualified_name (ident)) (argument (variable (ident)))))
          (conjunction
            (atom (qualified_name (ident)) (argument (variable (ident)))))))))

============================================================
Parenthesized binary disjunction
============================================================

rule(X, Y) :- (foo(X); bar(Y)).

---

(program
  (rule
    (monotonic_rule
      head:
        (atom
          (qualified_name (ident))
          (argument (variable (ident)))
          (argument (variable (ident))))
      body:
        (disjunction
          (conjunction
            (disjunction
              (conjunction
                (atom (qualified_name (ident)) (argument (variable (ident)))))
              (conjunction
                (atom (qualified_name (ident)) (argument (variable (ident)))))))))))

============================================================
Range rule
============================================================

rule(X) :- X = range(0,3).

---

(program
  (rule
    (monotonic_rule
      head:
        (atom
          (qualified_name (ident))
          (argument (variable (ident))))
      body:
        (disjunction
          (conjunction
            (constraint
              (comparison
                left:
                  (argument (variable (ident)))
                right:
                  (argument
                    (aggregator
                      (range
                        low: 
                          (argument (constant (number (integer (decimal)))))
                        high: 
                          (argument (constant (number (integer (decimal)))))))))))))))

============================================================
Query plan
============================================================

rule(X) :- rule(X).
.plan 0:(0)

---

(program
  (rule
    (monotonic_rule
      head:
        (atom
          (qualified_name (ident))
          (argument (variable (ident))))
      body:
        (disjunction
          (conjunction
            (atom
              (qualified_name (ident))
              (argument (variable (ident))))))
      plan:
        (query_plan))))

============================================================
Contains
============================================================

rule() :- contains(x, y).

---

(program
  (rule
    (monotonic_rule
      head: (atom (qualified_name (ident)))
      body:
        (disjunction
          (conjunction
            (constraint
              (contains
                (argument (variable (ident)))
                (argument (variable (ident))))))))))
